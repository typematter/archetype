{"version":3,"sources":["../node_modules/.pnpm/@typematter+pipeline@https+++codeload.github.com+typematter+pipeline+tar.gz+90e0e21c93f803654f7a5bec6aad97ba14475ddb/node_modules/@typematter/pipeline/src/lib/failure.ts","../node_modules/.pnpm/@typematter+pipeline@https+++codeload.github.com+typematter+pipeline+tar.gz+90e0e21c93f803654f7a5bec6aad97ba14475ddb/node_modules/@typematter/pipeline/src/lib/success.ts","../node_modules/.pnpm/@typematter+pipeline@https+++codeload.github.com+typematter+pipeline+tar.gz+90e0e21c93f803654f7a5bec6aad97ba14475ddb/node_modules/@typematter/pipeline/src/lib/compose.ts","../node_modules/.pnpm/@typematter+pipeline@https+++codeload.github.com+typematter+pipeline+tar.gz+90e0e21c93f803654f7a5bec6aad97ba14475ddb/node_modules/@typematter/pipeline/src/lib/resolve.ts","../src/lib/pipelines/stages/archetype-from-frontmatter.ts","../src/lib/pipelines/stages/frontmatter-from-yaml.ts","../src/lib/pipelines/stages/split-content.ts","../src/lib/pipelines/archetype-from-content.ts","../src/types/archetype-store.ts","../src/lib/store/loaders/file-loader.ts","../src/lib/store/loaders/http-loader.ts","../src/lib/store/loaders/name-loader.ts","../src/lib/store/loaders/path-loader.ts","../src/lib/store/create-load-content.ts","../src/lib/store/create-store.ts","../src/lib/validation/validate-array-field.ts","../src/lib/validation/validate-boolean-field.ts","../src/lib/validation/date-format/iso8601.ts","../src/lib/validation/validate-date-field.ts","../src/lib/validation/validate-number-field.ts","../src/lib/validation/validate-object-field.ts","../src/lib/validation/validate-string-field.ts","../src/lib/validation/validators.ts","../src/lib/validation/validate-schema-field.ts","../src/lib/validation/validate-archetype.ts","../src/lib/validation/validation-error.ts","../src/lib/validation/validate-frontmatter.ts","../src/lib/validator/extend-archetype.ts","../src/lib/validator/create-validator.ts"],"names":["readFile","loader","name","archetype"],"mappings":"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","file":"index.js","sourcesContent":["import type { Result } from '$types/result.js';\n\n/**\n * Custom error class for pipeline-specific errors.\n * Extends the standard `Error` class to provide pipeline-specific error handling.\n *\n * @example\n * ```typescript\n * // Direct usage\n * throw new PipelineError('Data validation failed');\n *\n * // Checking error type\n * if (error instanceof PipelineError) {\n *   // Handle pipeline-specific error\n * }\n * ```\n */\nclass PipelineError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = 'PipelineError';\n\t}\n}\n\n/**\n * Creates a failure `Result` object, standardizing error handling within the pipeline.\n * This utility function ensures all errors are properly wrapped in a `PipelineError`\n * and converted to a failure Result.\n *\n * The function handles three types of error inputs:\n * 1. `PipelineError` instances (passed through as-is)\n * 2. Standard `Error` instances (message is extracted and wrapped in `PipelineError`)\n * 3. Any other value (converted to string and wrapped in `PipelineError`)\n *\n * @template T - The type parameter of the `Result` (unused in failure case but required for type compatibility)\n * @param error - The error value to wrap. Can be any type, but will be converted to `PipelineError`.\n * @returns A `Result` object with `ok: false` and a `PipelineError`\n *\n * @example\n * // With PipelineError\n * const result1 = failure(new PipelineError('Pipeline stage failed'));\n * // Result<T, PipelineError> with original PipelineError\n *\n * @example\n * // With standard Error\n * const result2 = failure(new Error('Something went wrong'));\n * // Result<T, PipelineError> with message \"Something went wrong\"\n *\n * @example\n * // With string\n * const result3 = failure('Invalid input');\n * // Result<T, PipelineError> with message \"Invalid input\"\n *\n * @example\n * // Usage in pipeline stage\n * const processDataStage: PipelineStage<DataContext> = async (context) => {\n *   try {\n *     // Processing logic\n *     return success({ ...context, processed: true });\n *   } catch (error) {\n *     return failure(error);\n *   }\n * };\n *\n * @example\n * // Using with custom error handling\n * const handleError = (error: unknown) => {\n *   console.error('Pipeline failed:', error);\n *   return failure(error);\n * };\n *\n * @see {@link Result} - The Result type this function creates\n * @see {@link PipelineError} - The custom error class used for standardization\n */\nconst failure = <T>(error: unknown): Result<T, PipelineError> => ({\n\tok: false,\n\terror:\n\t\terror instanceof PipelineError\n\t\t\t? error\n\t\t\t: new PipelineError(error instanceof Error ? error.message : String(error))\n});\n\nexport { failure as default, PipelineError };\n","import type { Result } from '$types/result.js';\n\n/**\n * Creates a successful `Result` object containing a value.\n * This is a utility function to create the success case of a `Result` type in\n * a more concise and type-safe way.\n *\n * @template T - The type of the success value\n * @param value - The value to wrap in a successful `Result` object\n * @returns A `Result` object with `ok: true` and the provided value\n *\n * @example\n * // Basic usage\n * const numberResult = success(42);\n * // Type: Result<number> = { ok: true, value: 42 }\n *\n * @example\n * // With complex types\n * interface UserData {\n *   id: string;\n *   name: string;\n * }\n *\n * const userData = success({\n *   id: \"42\",\n *   name: \"Alice\"\n * });\n * // Type: Result<UserData>\n *\n * @example\n * // Using in async functions\n * async function fetchUser(id: string): Promise<Result<UserData>> {\n *   try {\n *     const user = await db.users.find(id);\n *     return success(user);\n *   } catch (error) {\n *     return failure(error);\n *   }\n * }\n *\n * @see {@link Result} - The Result type this function creates\n */\nconst success = <T>(value: T): Result<T> => ({\n\tok: true,\n\tvalue\n});\n\nexport default success;\n","import type { PipelineContext } from '$types/pipeline-context.js';\nimport type { PipelineStage } from '$types/pipeline-stage.js';\nimport failure from './failure.js';\nimport success from './success.js';\n\n/**\n * Configuration options for the compose function.\n *\n * @property mutate - When true, allows direct mutation of the pipeline context\n *                    between stages instead of creating new context objects.\n *                    This can improve performance but sacrifices immutability.\n */\ntype ComposeOptions = {\n\tmutate?: true;\n};\n\n/**\n * Function type for composing multiple pipeline stages into a single stage.\n *\n * @template T - The specific PipelineContext type these stages operate on\n * @param stages - Array of pipeline stages to compose\n * @param options - Configuration options for composition behavior\n * @returns A single pipeline stage that executes all stages in sequence\n */\ntype Compose = <T extends PipelineContext = PipelineContext>(\n\tstages: PipelineStage<T>[],\n\toptions?: ComposeOptions\n) => PipelineStage<T>;\n\n/**\n * Composes multiple pipeline stages into a single stage that executes them in sequence.\n * This function provides a way to combine multiple processing steps into a single\n * pipeline stage while handling errors and context passing between stages.\n *\n * Key features:\n * - Sequential execution of stages\n * - Automatic error propagation\n * - Context passing between stages\n * - Optional mutation mode for performance\n * - Deep cloning of context by default\n *\n * @template T - The specific PipelineContext type these stages operate on\n * @param stages - Array of pipeline stages to execute in sequence\n * @param options - Configuration options:\n *                 - mutate: When true, allows direct mutation of context between stages\n * @returns A single pipeline stage that executes all stages in sequence\n *\n * @example\n * // Basic composition of stages\n * const validateUser: PipelineStage<UserContext> = compose([\n *   validateEmail,\n *   validatePassword,\n *   validateAge\n * ]);\n *\n * @example\n * // Using mutation mode for performance\n * const processBigData: PipelineStage<DataContext> = compose([\n *   loadData,\n *   transformData,\n *   aggregateResults\n * ], { mutate: true });\n *\n * @example\n * // Error handling in composed stages\n * const processOrder: PipelineStage<OrderContext> = compose([\n *   validateOrder,\n *   checkInventory,\n *   processPayment,\n *   generateInvoice\n * ]);\n *\n * const result = await processOrder(orderContext);\n * if (result.ok) {\n *   // All stages completed successfully\n *   console.log('Order processed:', result.value);\n * } else {\n *   // One of the stages failed\n *   console.error('Processing failed:', result.error);\n * }\n *\n * @example\n * // Nested composition\n * const validateUser = compose([checkEmail, checkPassword]);\n * const processUser = compose([validateUser, createProfile]);\n * const completeRegistration = compose([\n *   processUser,\n *   sendWelcomeEmail,\n *   notifyAdmin\n * ]);\n *\n * @example\n * // With type-specific context\n * interface UserContext extends PipelineContext {\n *   email: string;\n *   profile?: UserProfile;\n *   validationStatus?: boolean;\n * }\n *\n * const userPipeline = compose<UserContext>([\n *   validateUserData,\n *   enrichUserProfile,\n *   finalizeUser\n * ]);\n *\n * @remarks\n * By default, the compose function creates a new context object for each stage\n * using structured cloning. This ensures immutability but may impact performance\n * with large contexts. Use the mutate option if performance is critical and\n * you can safely mutate the context.\n *\n * Error handling is automatic - if any stage returns a failure Result or throws\n * an error, the composed pipeline immediately returns that failure without\n * executing remaining stages.\n *\n * @see {@link PipelineStage} - Individual stage type\n * @see {@link PipelineContext} - Context type\n * @see {@link Result} - Return type for pipeline stages\n */\nconst compose = ((stages, { mutate } = {}) =>\n\tasync (context) => {\n\t\tlet currentContext = mutate === true ? context : structuredClone(context);\n\n\t\tfor (const stage of stages) {\n\t\t\ttry {\n\t\t\t\tconst result = await stage(currentContext);\n\n\t\t\t\tif (result.ok) {\n\t\t\t\t\tcurrentContext =\n\t\t\t\t\t\tmutate === true ? Object.assign(currentContext, result.value) : result.value;\n\t\t\t\t} else {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\treturn failure(error);\n\t\t\t}\n\t\t}\n\n\t\treturn success(currentContext);\n\t}) satisfies Compose;\n\nexport default compose;\n","import type { Result } from '$types/result.js';\n\n/**\n * Extracts the value from a `Result` type or throws the error if it's a\n * failure.\n * This utility function converts the `Result` type back into the standard\n * TypeScript success/throw pattern. It's useful when you need to interact with\n * code that expects traditional error handling or when you're at a boundary\n * where you want to handle errors through the try/catch mechanism.\n *\n * @template T - The type of the success value\n * @template E - The type of the error value\n * @param result - The Result object to resolve\n * @returns The value if Result is successful\n * @throws The error value if Result is a failure\n *\n * @example\n * // Successful case\n * const successResult: Result<number> = success(42);\n * try {\n *   const value = resolve(successResult); // Returns 42\n *   console.log(value);\n * } catch (error) {\n *   // This block won't execute\n * }\n *\n * @example\n * // Failure case\n * const failureResult: Result<number> = failure(new Error('Process failed'));\n * try {\n *   const value = resolve(failureResult); // Throws Error\n *   // This line won't execute\n * } catch (error) {\n *   console.error('Caught:', error);\n * }\n *\n * @example\n * // Usage at system boundaries\n * async function processUserData(userId: string): Promise<UserData> {\n *   const result = await pipelineProcessor.process({ userId });\n *   // Convert from Result type to traditional try/catch at system boundary\n *   return resolve(result);\n * }\n *\n * @example\n * // With custom error types\n * interface ValidationError {\n *   code: string;\n *   message: string;\n * }\n * const result: Result<string, ValidationError> = failure({\n *   code: 'INVALID',\n *   message: 'Invalid input'\n * });\n * try {\n *   resolve(result); // Throws ValidationError\n * } catch (error) {\n *   // error will be ValidationError type\n * }\n *\n * @see {@link Result} - The `Result` type this function processes\n * @see {@link success} - Creates a successful `Result`\n * @see {@link failure} - Creates a failure `Result`\n */\nconst resolve: <T, E>(result: Result<T, E>) => T = (result) => {\n\tif (result.ok) {\n\t\treturn result.value;\n\t} else {\n\t\tthrow result.error;\n\t}\n};\n\nexport default resolve;\n","import type { Archetype } from '$types/archetype.js';\nimport { failure, success, type PipelineStage } from '@typematter/pipeline';\n\nconst archetypeFromFrontmatter: PipelineStage = async ({\n\tfrontmatter,\n\t...rest\n}: {\n\tfrontmatter?: Record<string, unknown>;\n}) => {\n\tif (frontmatter === undefined || frontmatter === null) {\n\t\treturn failure('`frontmatter` is missing from the pipeline context');\n\t}\n\n\tconst archetype = frontmatter as unknown as Archetype;\n\n\treturn success({ ...rest, archetype });\n};\n\nexport default archetypeFromFrontmatter;\n","import { failure, success, type PipelineStage } from '@typematter/pipeline';\nimport { parse } from 'yaml';\n\nconst frontmatterFromYaml: PipelineStage = async ({ yaml, ...rest }: { yaml?: string }) => {\n\tif (yaml === undefined || yaml === null) {\n\t\treturn failure('`yaml` is missing from the pipeline context');\n\t}\n\n\tconst frontmatter: Record<string, unknown> = parse(yaml) ?? undefined;\n\n\treturn success({ ...rest, frontmatter });\n};\n\nexport default frontmatterFromYaml;\n","import { failure, success, type PipelineStage } from '@typematter/pipeline';\n\nconst splitContent: PipelineStage = async ({ content, ...rest }: { content?: string }) => {\n\tif (content === undefined || content === null) {\n\t\treturn failure('`content` is missing from the pipeline context');\n\t}\n\n\tconst [, yaml, ...markdown] = content.split(/^---[ \\t]*$/m);\n\n\treturn success({ ...rest, markdown: markdown.join('---').trim(), yaml: yaml?.trim() });\n};\n\nexport default splitContent;\n","import { compose } from '@typematter/pipeline';\nimport archetypeFromFrontmatter from './stages/archetype-from-frontmatter.js';\nimport frontmatterFromYaml from './stages/frontmatter-from-yaml.js';\nimport splitContent from './stages/split-content.js';\n\nconst archetypeFromContent = compose([splitContent, frontmatterFromYaml, archetypeFromFrontmatter]);\n\nexport default archetypeFromContent;\n","import type { Archetype } from './archetype.js';\n\nclass ArchetypeLoadError extends Error {\n\tconstructor(message: string, cause?: unknown) {\n\t\tsuper(message);\n\t\tthis.name = 'ArchetypeLoadError';\n\t\tthis.cause = cause;\n\t}\n}\n\ninterface ArchetypeStore {\n\t/**\n\t * Load an archetype schema by name.\n\t *\n\t * @param name - The name of the archetype to load.\n\t * @returns A promise that resolves to the loaded archetype schema.\n\t *\n\t * @throws {ArchetypeLoadError} If the archetype schema could not be loaded\n\t *\n\t * @example\n\t * const archetype = await store.load('post');\n\t */\n\tload(name: string): Promise<Archetype>;\n}\n\nexport { ArchetypeLoadError, type ArchetypeStore };\n","import type { Loader } from '$types/loader.js';\nimport { readFile } from 'node:fs/promises';\n\nconst fileLoader: Loader = {\n\tcanHandle: (path) => path.toString().match(/^file:\\/\\/|^\\/|^\\.\\.?\\//) !== null,\n\tload: async (path) => await readFile(`${path.toString()}.md`, 'utf-8')\n};\n\nexport default fileLoader;\n","import type { Loader } from '$types/loader.js';\n\nconst httpLoader: Loader = {\n\tcanHandle: (path) => path.toString().match(/^https?:\\/\\//) !== null,\n\tload: async (path) => await fetch(path.toString()).then((res) => res.text())\n};\n\nexport default httpLoader;\n","import type { Loader } from '$types/loader.js';\nimport { readFile } from 'node:fs/promises';\nimport { join } from 'node:path';\nimport { cwd } from 'node:process';\n\n/**\n * Load an archetype by name from the project's `data/archetypes` directory.\n */\nconst nameLoader: Loader = {\n\tcanHandle: (path) => path.toString().match(/^[\\w][\\w-]*$/) !== null,\n\tload: (path) => {\n\t\tconst filename = join(cwd(), 'data', 'archetypes', `${path.toString()}.md`);\n\n\t\treturn readFile(filename, 'utf-8');\n\t}\n};\n\nexport default nameLoader;\n","import type { Loader } from '$types/loader.js';\nimport { readFile } from 'node:fs/promises';\n\nconst pathLoader: Loader = {\n\tcanHandle: (path) => {\n\t\tconst filename = path.toString();\n\n\t\treturn (\n\t\t\t(filename.startsWith('/') || filename.startsWith('./') || filename.startsWith('../')) &&\n\t\t\tfilename.endsWith('.md')\n\t\t);\n\t},\n\tload: (path) => readFile(path.toString(), 'utf-8')\n};\n\nexport default pathLoader;\n","import type { Loader } from '$types/loader.js';\nimport { failure, success, type PipelineStage } from '@typematter/pipeline';\nimport type { PathLike } from 'fs';\nimport fileLoader from './loaders/file-loader.js';\nimport httpLoader from './loaders/http-loader.js';\nimport nameLoader from './loaders/name-loader.js';\nimport pathLoader from './loaders/path-loader.js';\n\nconst defaultLoaders = [nameLoader, pathLoader, fileLoader, httpLoader];\n\nconst createLoadContent: (loaders?: Loader[]) => PipelineStage =\n\t(loaders = defaultLoaders) =>\n\tasync ({ path, ...rest }: { path?: PathLike }) => {\n\t\tif (path === undefined || path === null) {\n\t\t\treturn failure('`path` is missing from the pipeline context');\n\t\t}\n\n\t\tconst loader = loaders.find((loader) => loader.canHandle(path));\n\n\t\tif (loader) {\n\t\t\ttry {\n\t\t\t\tconst content = await loader.load(path);\n\n\t\t\t\treturn success({ ...rest, content });\n\t\t\t} catch (error) {\n\t\t\t\treturn failure(error);\n\t\t\t}\n\t\t}\n\n\t\treturn failure('No suitable strategy found');\n\t};\n\nexport default createLoadContent;\n","import archetypeFromContent from '$lib/pipelines/archetype-from-content.js';\nimport { ArchetypeLoadError, type ArchetypeStore } from '$types/archetype-store.js';\nimport type { Archetype } from '$types/archetype.js';\nimport type { StoreOptions } from '$types/store-options.js';\nimport { compose, resolve } from '@typematter/pipeline';\nimport { DEV } from 'esm-env';\nimport type { PathLike } from 'fs';\nimport createLoadContent from './create-load-content.js';\n\nconst createStore: (options?: StoreOptions) => ArchetypeStore = ({\n\tcache = !DEV,\n\tloaders\n} = {}) => {\n\tconst loadArchetype = compose<{ archetype?: Archetype; path?: PathLike }>([\n\t\tcreateLoadContent(loaders),\n\t\tarchetypeFromContent\n\t]);\n\tconst archetypeCache = cache ? new Map<string, Archetype>() : undefined;\n\n\treturn {\n\t\tload: async (path: PathLike) => {\n\t\t\tconst name = path.toString();\n\n\t\t\tif (archetypeCache?.has(name)) {\n\t\t\t\treturn archetypeCache.get(name)!;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst { archetype } = await loadArchetype({ path }).then(resolve);\n\n\t\t\t\tif (archetype === undefined || archetype === null) {\n\t\t\t\t\tthrow 'Failed to load archetype';\n\t\t\t\t}\n\n\t\t\t\tif (cache) {\n\t\t\t\t\tarchetypeCache?.set(name, archetype);\n\t\t\t\t}\n\n\t\t\t\treturn archetype;\n\t\t\t} catch (error) {\n\t\t\t\tthrow typeof error === 'string'\n\t\t\t\t\t? new ArchetypeLoadError(error)\n\t\t\t\t\t: new ArchetypeLoadError(`Error loading ${name}`, error);\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport { createStore as default };\n","import type { ArrayField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateArrayField = (\n\tvalue: unknown,\n\tfield: ArrayField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (!Array.isArray(value)) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected array, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.minItems !== undefined && value.length < field.minItems) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Array must contain at least ${field.minItems} items`\n\t\t});\n\t}\n\n\tif (field.maxItems !== undefined && value.length > field.maxItems) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Array must contain at most ${field.maxItems} items`\n\t\t});\n\t}\n\n\tvalue.forEach((item, index) => {\n\t\terrors.push(...validateSchemaField(item, field.items, [...path, index.toString()]));\n\t});\n\n\treturn errors;\n};\n\nexport default validateArrayField;\n","import type { BooleanField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateBooleanField = (\n\tvalue: unknown,\n\tfield: BooleanField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'boolean') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected boolean, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tvoid field;\n\n\treturn errors;\n};\n\nexport default validateBooleanField;\n","const ISO8601_FORMATS = {\n\tCALENDAR:\n\t\t/^(\\d{4})-([01]\\d)-([0-3]\\d)(?:T([012]\\d):([0-5]\\d):([0-5]\\d)(?:\\.(\\d+))?(Z|([+-])([01]\\d):([0-5]\\d))?)?$/,\n\tORDINAL: /^(\\d{4})-(\\d{3})$/,\n\tWEEK: /^(\\d{4})-W([0-5]\\d)(?:-([1-7]))?$/\n};\n\nconst parseWeekDate: (year: number, week: number, day?: number) => Date = (year, week, day = 1) => {\n\t// January 4th is always in week 1 per ISO-8601\n\tconst jan4th = new Date(year, 0, 4);\n\tconst startOfWeek1 = new Date(jan4th);\n\n\tstartOfWeek1.setDate(jan4th.getDate() - jan4th.getDay() + 1);\n\n\t// Calculate target date\n\tconst targetDate = new Date(startOfWeek1);\n\n\ttargetDate.setDate(startOfWeek1.getDate() + (week - 1) * 7 + (day - 1));\n\n\t// Validate the resulting year is correct\n\tif (targetDate.getFullYear() !== year) {\n\t\tthrow new Error('Invalid week date');\n\t}\n\n\treturn targetDate;\n};\n\nconst parseOrdinalDate: (year: number, ordinalDay: number) => Date = (year, ordinalDay) => {\n\tconst date = new Date(year, 0, 1);\n\n\tdate.setDate(ordinalDay);\n\n\t// Validate the resulting year is correct\n\tif (date.getFullYear() !== year) {\n\t\tthrow new Error('Invalid ordinal date');\n\t}\n\n\treturn date;\n};\n\nconst parseDate: (dateString: string) => Date = (dateString) => {\n\tconst dateMatch = dateString.match(ISO8601_FORMATS.CALENDAR);\n\n\tif (dateMatch) {\n\t\tconst [, y, m, d, h, min, s, ms, tz, o, hoff, minoff] = dateMatch;\n\n\t\tvoid tz;\n\n\t\tconst year = Number(y);\n\t\tconst month = Number(m);\n\t\tconst day = Number(d);\n\t\tconst hour = h ? Number(h) : 0;\n\t\tconst minute = min ? Number(min) : 0;\n\t\tconst second = s ? Number(s) : 0;\n\t\tconst millisecond = ms ? Number(ms) : 0;\n\t\tconst hourOffset = hoff ? Number(`${o}${hoff}`) : 0;\n\t\tconst minuteOffset = minoff ? Number(`${o}${minoff}`) : 0;\n\n\t\tconst date = new Date(dateString);\n\n\t\tif (date instanceof Date === false) {\n\t\t\tthrow new Error('Invalid calendar date');\n\t\t} else if (\n\t\t\tdate.getFullYear() !== year ||\n\t\t\tdate.getMonth() + 1 !== month ||\n\t\t\tdate.getDate() !== day ||\n\t\t\tdate.getHours() !== hour - hourOffset ||\n\t\t\tdate.getMinutes() !== minute - minuteOffset ||\n\t\t\tdate.getSeconds() !== second ||\n\t\t\tdate.getMilliseconds() !== millisecond\n\t\t) {\n\t\t\tthrow new Error('Invalid calendar date');\n\t\t} else {\n\t\t\treturn date;\n\t\t}\n\t}\n\n\tconst weekMatch = dateString.match(ISO8601_FORMATS.WEEK);\n\n\tif (weekMatch) {\n\t\tconst [, y, w, d] = weekMatch;\n\n\t\tconst year = Number(y);\n\t\tconst week = Number(w);\n\t\tconst day = d ? Number(d) : 1;\n\n\t\tif (week < 1 || week > 53) {\n\t\t\tthrow new Error('Invalid week number');\n\t\t}\n\n\t\tif (week === 53) {\n\t\t\tconst dec31 = new Date(year, 11, 31);\n\n\t\t\tconst lastWeek =\n\t\t\t\tMath.floor((dec31.getTime() - new Date(year, 0, 1).getTime()) / (86400000 * 7)) + 1;\n\n\t\t\tif (lastWeek !== 53) {\n\t\t\t\tthrow new Error('Invalid week number');\n\t\t\t}\n\t\t}\n\n\t\treturn parseWeekDate(year, week, day);\n\t}\n\n\tconst ordinalMatch = dateString.match(ISO8601_FORMATS.ORDINAL);\n\n\tif (ordinalMatch) {\n\t\tconst [, y, od] = ordinalMatch;\n\n\t\tconst year = Number(y);\n\t\tconst ordinalDay = Number(od);\n\n\t\t// Validate ordinal day number\n\t\tconst isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n\t\tconst maxDays = isLeapYear ? 366 : 365;\n\n\t\tif (ordinalDay < 1 || ordinalDay > maxDays) {\n\t\t\tthrow new Error('Invalid ordinal day number');\n\t\t}\n\n\t\treturn parseOrdinalDate(year, ordinalDay);\n\t}\n\n\tthrow new Error('Invalid ISO-8601 date format');\n};\n\nconst isValidDate: (dateString: string) => boolean = (date) => {\n\ttry {\n\t\treturn parseDate(date) instanceof Date;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport { isValidDate, parseDate };\n","import type { DateField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport { isValidDate } from './date-format/iso8601.js';\n\nconst validateDateField = (\n\tvalue: unknown,\n\tfield: DateField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'string' || isNaN(Date.parse(value))) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: 'Invalid date format'\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.format === 'ISO-8601' && isValidDate(value) === false) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: 'Date must be in ISO-8601 format'\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateDateField;\n","import type { NumberField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateNumberField = (\n\tvalue: unknown,\n\tfield: NumberField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'number') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected number, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.min !== undefined && value < field.min) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be >= ${field.min}`\n\t\t});\n\t}\n\n\tif (field.max !== undefined && value > field.max) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be <= ${field.max}`\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateNumberField;\n","import type { ObjectField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateObjectField = (\n\tvalue: unknown,\n\tfield: ObjectField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected object, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tconst valueObj = value as Record<string, unknown>;\n\n\tfield.required?.forEach((requiredProp) => {\n\t\tif (!(requiredProp in valueObj)) {\n\t\t\terrors.push({\n\t\t\t\tpath: [...path, requiredProp],\n\t\t\t\tmessage: 'Required property missing'\n\t\t\t});\n\t\t}\n\t});\n\n\tif (field.properties) {\n\t\tObject.entries(field.properties).forEach(([key, propSchema]) => {\n\t\t\tif (key in valueObj) {\n\t\t\t\terrors.push(...validateSchemaField(valueObj[key], propSchema, [...path, key]));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateObjectField;\n","import type { StringField } from '$types/schema-field.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\n\nconst validateStringField = (\n\tvalue: unknown,\n\tfield: StringField,\n\tpath: string[] = []\n): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tif (typeof value !== 'string') {\n\t\treturn [\n\t\t\t{\n\t\t\t\tpath,\n\t\t\t\tmessage: `Expected string, got ${typeof value}`\n\t\t\t}\n\t\t];\n\t}\n\n\tif (field.enum && !field.enum.includes(value as string)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value must be one of: ${field.enum.join(', ')}`\n\t\t});\n\t}\n\n\tif (field.pattern && !new RegExp(field.pattern).test(value as string)) {\n\t\terrors.push({\n\t\t\tpath,\n\t\t\tmessage: `Value does not match pattern: ${field.pattern}`\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validateStringField;\n","import type { SchemaFieldMap } from '$types/schema-field.js';\nimport type { ValidationError } from '$types/validation-error.js';\nimport validateArrayField from './validate-array-field.js';\nimport validateBooleanField from './validate-boolean-field.js';\nimport validateDateField from './validate-date-field.js';\nimport validateNumberField from './validate-number-field.js';\nimport validateObjectField from './validate-object-field.js';\nimport validateStringField from './validate-string-field.js';\n\ntype Validators = {\n\t[K in keyof SchemaFieldMap]: (\n\t\tvalue: unknown,\n\t\tfield: SchemaFieldMap[K],\n\t\tpath: string[]\n\t) => ValidationError[];\n};\n\nconst validators: Validators = {\n\tArray: validateArrayField,\n\tBoolean: validateBooleanField,\n\tDate: validateDateField,\n\tNumber: validateNumberField,\n\tObject: validateObjectField,\n\tString: validateStringField\n};\n\nexport default validators;\n","import type { SchemaField } from '$types/schema-field.js';\nimport type { ValidationError } from '$types/validation-error.js';\nimport validators from './validators.js';\n\nconst validateSchemaField: (\n\tvalue: unknown,\n\tfield: SchemaField,\n\tpath?: string[]\n) => ValidationError[] = (value, field, path = []) => {\n\tconst validator = validators[field.type];\n\n\tif (validator) {\n\t\treturn validator(value, field as never, path);\n\t}\n\n\tthrow new Error(`No validator found for type: ${field.type}`);\n};\n\nexport default validateSchemaField;\n","import type { Archetype } from '$types/archetype.js';\nimport type { SchemaField } from '$types/schema-field.js';\nimport type { ValidationResult } from '$types/validation-result.js';\nimport type { ValidationError } from 'src/types/validation-error.js';\nimport validateSchemaField from './validate-schema-field.js';\n\nconst validateArchetype: (archetype: unknown, archetypeSchema: Archetype) => ValidationResult = (\n\tarchetype,\n\tarchetypeSchema\n) => {\n\tconst errors: ValidationError[] = [];\n\n\tfor (const [fieldName, fieldSchema] of Object.entries(archetypeSchema.schema.required) as [\n\t\tstring,\n\t\tSchemaField\n\t][]) {\n\t\tconst value =\n\t\t\tarchetype && typeof archetype === 'object'\n\t\t\t\t? (archetype as Record<string, unknown>)[fieldName]\n\t\t\t\t: undefined;\n\n\t\tif (value === undefined) {\n\t\t\terrors.push({\n\t\t\t\tpath: [fieldName],\n\t\t\t\tmessage: 'Required field missing'\n\t\t\t});\n\t\t} else {\n\t\t\terrors.push(...validateSchemaField(value, fieldSchema, [fieldName]));\n\t\t}\n\t}\n\n\tfor (const [fieldName, fieldSchema] of Object.entries(archetypeSchema.schema.optional) as [\n\t\tstring,\n\t\tSchemaField\n\t][]) {\n\t\tconst value =\n\t\t\tarchetype && typeof archetype === 'object'\n\t\t\t\t? (archetype as Record<string, unknown>)[fieldName]\n\t\t\t\t: undefined;\n\n\t\tif (value !== undefined) {\n\t\t\terrors.push(...validateSchemaField(value, fieldSchema, [fieldName]));\n\t\t}\n\t}\n\n\treturn {\n\t\tvalid: errors.length === 0,\n\t\terrors\n\t};\n};\n\nexport default validateArchetype;\n","import type { ValidationError } from '$types/validation-error.js';\n\nconst validationError: (message: string, path?: string[]) => ValidationError = (\n\tmessage,\n\tpath = []\n) => ({\n\tmessage,\n\tpath\n});\n\nexport default validationError;\n","import type { ArchetypeValidator } from '$types/archetype-validator.js';\nimport type { ValidationResult } from '$types/validation-result.js';\nimport validateArchetype from './validate-archetype.js';\nimport validationError from './validation-error.js';\n\nconst validateFrontmatter: (\n\tfrontmatter: unknown,\n\tvalidator: ArchetypeValidator\n) => Promise<ValidationResult> = async (frontmatter, { loadArchetype }) => {\n\tif (frontmatter === null || typeof frontmatter !== 'object') {\n\t\treturn {\n\t\t\tvalid: false,\n\t\t\terrors: [validationError('Frontmatter must be an object')]\n\t\t};\n\t}\n\n\tconst archetypeName =\n\t\t'type' in frontmatter && typeof frontmatter.type === 'string' ? frontmatter.type : undefined;\n\n\tif (archetypeName === undefined) {\n\t\treturn {\n\t\t\tvalid: false,\n\t\t\terrors: [validationError('Frontmatter must have a `type` field', ['type'])]\n\t\t};\n\t}\n\n\tconst archetype = await loadArchetype(archetypeName);\n\n\treturn validateArchetype(frontmatter, archetype);\n};\n\nexport default validateFrontmatter;\n","import type { Archetype } from '$types/archetype.js';\n\nconst extendArchetype: (archetype: Archetype, extensions: Archetype[]) => Archetype = (\n\tarchetype,\n\textensions\n) =>\n\textensions.reduce(\n\t\t(prev, { schema: { required, optional } }) => ({\n\t\t\t...prev,\n\t\t\tschema: {\n\t\t\t\trequired: { ...prev.schema.required, ...required },\n\t\t\t\toptional: { ...prev.schema.optional, ...optional }\n\t\t\t}\n\t\t}),\n\t\tarchetype\n\t);\n\nexport default extendArchetype;\n","import createStore from '$lib/store/create-store.js';\nimport validateArchetype from '$lib/validation/validate-archetype.js';\nimport validateFrontmatter from '$lib/validation/validate-frontmatter.js';\nimport type { ArchetypeValidator } from '$types/archetype-validator.js';\nimport type { Archetype } from '$types/archetype.js';\nimport type { ValidatorOptions } from '$types/validator-options.js';\nimport extendArchetype from './extend-archetype.js';\n\n/**\n * Creates and initializes an ArchetypeValidator instance.\n *\n * @param options - Configuration options for the validator.\n * @param options.store - The data store used to load archetype schemas.\n * @param options.cache - Determines whether to cache loaded archetypes. Defaults to `true` in test and production environments.\n * @param options.validation - Additional validation options to apply. Defaults to an empty object.\n * @returns A promise that resolves to an initialized ArchetypeValidator.\n *\n * @throws {Error} If the initial archetype schema is invalid.\n *\n * @example\n * const validator = await createValidator({\n *     store: createLocalStore(path.join(process.cwd(), 'data', 'archetypes')),\n * });\n */\nconst createValidator: (options?: ValidatorOptions) => Promise<ArchetypeValidator> = async ({\n\tstore: _store = createStore(),\n\tvalidation: { strictMode = false, allowUnknownFields = false } = {}\n} = {}) => {\n\tconst store =\n\t\ttypeof _store === 'object' ? ('load' in _store ? _store : createStore(_store)) : undefined;\n\n\tif (store === undefined) {\n\t\tthrow new Error('Invalid store configuration');\n\t}\n\n\tvoid strictMode;\n\tvoid allowUnknownFields;\n\n\tconst archetypeSchema = await store.load('archetype');\n\n\tconst { errors, valid } = validateArchetype(archetypeSchema, archetypeSchema);\n\n\tif (!valid) {\n\t\tthrow new Error('Invalid archetype schema', { cause: errors });\n\t}\n\n\tconst validator: ArchetypeValidator = {\n\t\tarchetypeSchema,\n\n\t\tloadArchetype: async (name) => {\n\t\t\tconst archetype = await store.load(name);\n\n\t\t\tconst loadedArchetypes = new Map<string, Archetype>();\n\n\t\t\tconst loadArchetypeRecursive = async (names: string[] = []) => {\n\t\t\t\tfor (const name of names) {\n\t\t\t\t\tif (loadedArchetypes.has(name)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst archetype = await store.load(name);\n\n\t\t\t\t\tloadedArchetypes.set(name, archetype);\n\n\t\t\t\t\tif (archetype.extends) {\n\t\t\t\t\t\tawait loadArchetypeRecursive(archetype.extends);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait loadArchetypeRecursive(archetype.extends);\n\n\t\t\treturn extendArchetype(archetype, Array.from(loadedArchetypes.values()));\n\t\t},\n\n\t\tvalidateArchetype: async (archetype) => validateArchetype(archetype, archetypeSchema),\n\n\t\tvalidateFrontmatter: async (frontmatter) => validateFrontmatter(frontmatter, validator)\n\t};\n\n\treturn validator;\n};\n\nexport default createValidator;\n"]}